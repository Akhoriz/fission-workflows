{
  "swagger": "2.0",
  "info": {
    "title": "pkg/apiserver/apiserver.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/halt": {
      "get": {
        "operationId": "Halt",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "tags": [
          "AdminAPI"
        ]
      }
    },
    "/invocation": {
      "get": {
        "operationId": "WfiList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiserverWorkflowInvocationList"
            }
          }
        },
        "tags": [
          "WorkflowInvocationAPI"
        ]
      },
      "post": {
        "summary": "Create a new workflow invocation",
        "description": "In case the invocation specification is missing fields or contains invalid fields, a HTTP 400 is returned.",
        "operationId": "Invoke",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiserverWorkflowInvocationIdentifier"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowInvocationSpec"
            }
          }
        ],
        "tags": [
          "WorkflowInvocationAPI"
        ]
      }
    },
    "/invocation/sync": {
      "get": {
        "operationId": "InvokeSync2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowInvocation"
            }
          }
        },
        "parameters": [
          {
            "name": "workflowId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "description": "ParentId contains the id of the encapsulating workflow invocation.\n\nThis used within the workflow engine; for user-provided workflow invocations the parentId is ignored.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowInvocationAPI"
        ]
      },
      "post": {
        "operationId": "InvokeSync",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowInvocation"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowInvocationSpec"
            }
          }
        ],
        "tags": [
          "WorkflowInvocationAPI"
        ]
      }
    },
    "/invocation/validate": {
      "post": {
        "operationId": "WfiValidate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowInvocationSpec"
            }
          }
        ],
        "tags": [
          "WorkflowInvocationAPI"
        ]
      }
    },
    "/invocation/{id}": {
      "get": {
        "summary": "Get the specification and status of a workflow invocation",
        "description": "Get returns three different aspects of the workflow invocation, namely the spec (specification), status and logs.\nTo lighten the request load, consider using a more specific request.",
        "operationId": "WfiGet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowInvocation"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowInvocationAPI"
        ]
      },
      "delete": {
        "summary": "Cancel a workflow invocation",
        "description": "This action is irreverisble. A canceled invocation cannot be resumed or restarted.\nIn case that an invocation already is canceled, has failed or has completed, nothing happens.\nIn case that an invocation does not exist a HTTP 404 error status is returned.",
        "operationId": "Cancel",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowInvocationAPI"
        ]
      }
    },
    "/resume": {
      "get": {
        "operationId": "Resume",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "tags": [
          "AdminAPI"
        ]
      }
    },
    "/status": {
      "get": {
        "operationId": "Status",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiserverHealth"
            }
          }
        },
        "tags": [
          "AdminAPI"
        ]
      }
    },
    "/version": {
      "get": {
        "operationId": "Version",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiserverVersionResp"
            }
          }
        },
        "tags": [
          "AdminAPI"
        ]
      }
    },
    "/workflow": {
      "get": {
        "operationId": "WfList",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiserverSearchWorkflowResponse"
            }
          }
        },
        "tags": [
          "WorkflowAPI"
        ]
      },
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiserverWorkflowIdentifier"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowSpec"
            }
          }
        ],
        "tags": [
          "WorkflowAPI"
        ]
      }
    },
    "/workflow/validate": {
      "post": {
        "operationId": "WfValidate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowSpec"
            }
          }
        ],
        "tags": [
          "WorkflowAPI"
        ]
      }
    },
    "/workflow/{id}": {
      "get": {
        "operationId": "WfGet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowAPI"
        ]
      },
      "delete": {
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowAPI"
        ]
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "FnRef": {
      "type": "object",
      "properties": {
        "runtime": {
          "type": "string",
          "description": "Runtime is the Function Runtime environment (fnenv) that was used to resolve the function."
        },
        "runtimeId": {
          "type": "string",
          "description": "RuntimeId is the runtime-specific identifier of the function."
        }
      },
      "description": "FnRef is an immutable, unique reference to a function on a specific function runtime environment.\n\nThe string representation (via String or Format): runtime://runtimeId"
    },
    "ObjectMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Common"
    },
    "Task": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/ObjectMetadata"
        },
        "spec": {
          "$ref": "#/definitions/TaskSpec"
        },
        "status": {
          "$ref": "#/definitions/TaskStatus"
        }
      },
      "title": "Task Model"
    },
    "TaskDependencyParameters": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/TaskDependencyParametersDependencyType"
        },
        "alias": {
          "type": "string"
        }
      }
    },
    "TaskDependencyParametersDependencyType": {
      "type": "string",
      "enum": [
        "DATA",
        "CONTROL",
        "DYNAMIC_OUTPUT"
      ],
      "default": "DATA"
    },
    "TaskInvocation": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/ObjectMetadata"
        },
        "spec": {
          "$ref": "#/definitions/TaskInvocationSpec"
        },
        "status": {
          "$ref": "#/definitions/TaskInvocationStatus"
        }
      },
      "title": "Task Invocation Model"
    },
    "TaskInvocationSpec": {
      "type": "object",
      "properties": {
        "fnRef": {
          "$ref": "#/definitions/FnRef",
          "title": "Id of the task to be invoked (no ambiguatity at this point"
        },
        "taskId": {
          "type": "string",
          "title": "TaskId is the id of the task within the workflow"
        },
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TypedValue"
          },
          "title": "Inputs contain all inputs to the task invocation"
        },
        "invocationId": {
          "type": "string"
        }
      }
    },
    "TaskInvocationStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/TaskInvocationStatusStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "output": {
          "$ref": "#/definitions/TypedValue"
        },
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "TaskInvocationStatusStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SCHEDULED",
        "IN_PROGRESS",
        "SUCCEEDED",
        "FAILED",
        "ABORTED",
        "SKIPPED"
      ],
      "default": "UNKNOWN"
    },
    "TaskSpec": {
      "type": "object",
      "properties": {
        "functionRef": {
          "type": "string",
          "title": "Name/identifier of the function"
        },
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TypedValue"
          }
        },
        "requires": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TaskDependencyParameters"
          },
          "title": "Dependencies for this task to execute"
        },
        "await": {
          "type": "integer",
          "format": "int32",
          "title": "Number of dependencies to wait for"
        },
        "output": {
          "$ref": "#/definitions/TypedValue",
          "title": "Transform the output, or override the output with a literal"
        }
      },
      "description": "A task is the primitive unit of a workflow, representing an action that needs to be performed in order to continue.\n\nA task as a number of inputs and exactly two outputs\nId is specified outside of TaskSpec"
    },
    "TaskStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/TaskStatusStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "fnRef": {
          "$ref": "#/definitions/FnRef"
        },
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "TaskStatusStatus": {
      "type": "string",
      "enum": [
        "STARTED",
        "READY",
        "FAILED"
      ],
      "default": "STARTED"
    },
    "TypedValue": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "Copy of protobuf's Any, to avoid protobuf requirement of a protobuf-based type."
    },
    "Workflow": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/ObjectMetadata"
        },
        "spec": {
          "$ref": "#/definitions/WorkflowSpec"
        },
        "status": {
          "$ref": "#/definitions/WorkflowStatus"
        }
      },
      "title": "Workflow Model"
    },
    "WorkflowInvocation": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/ObjectMetadata"
        },
        "spec": {
          "$ref": "#/definitions/WorkflowInvocationSpec"
        },
        "status": {
          "$ref": "#/definitions/WorkflowInvocationStatus"
        }
      },
      "title": "Workflow Invocation Model"
    },
    "WorkflowInvocationSpec": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        },
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TypedValue"
          }
        },
        "parentId": {
          "type": "string",
          "description": "ParentId contains the id of the encapsulating workflow invocation.\n\nThis used within the workflow engine; for user-provided workflow invocations the parentId is ignored."
        }
      },
      "title": "Workflow Invocation Model"
    },
    "WorkflowInvocationStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/WorkflowInvocationStatusStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "tasks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TaskInvocation"
          }
        },
        "output": {
          "$ref": "#/definitions/TypedValue"
        },
        "dynamicTasks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Task"
          },
          "description": "In case the task ID also exists in the workflow spec, the dynamic task will be\nused as an overlay over the static task."
        },
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "WorkflowInvocationStatusStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SCHEDULED",
        "IN_PROGRESS",
        "SUCCEEDED",
        "FAILED",
        "ABORTED"
      ],
      "default": "UNKNOWN"
    },
    "WorkflowSpec": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "apiVersion describes what version is of the workflow definition.\nBy default the workflow engine will assume the latest version to be used."
        },
        "tasks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TaskSpec"
          },
          "description": "Tasks contains the specs of the tasks, with the key being the task id.\n\nNote: Dependency graph is build into the tasks."
        },
        "outputTask": {
          "type": "string",
          "title": "From which task should the workflow return the output? Future: multiple? Implicit?"
        },
        "description": {
          "type": "string"
        },
        "forceId": {
          "type": "string",
          "description": "The UID that the workflow should have. Only use this in case you want to force a specific UID."
        },
        "name": {
          "type": "string",
          "title": "Name is solely for human-readablity"
        },
        "internal": {
          "type": "boolean",
          "format": "boolean",
          "description": "Internal indicates whether is a workflow should be visible to a human (default) or not."
        }
      },
      "description": "The workflowDefinition contains the definition of a workflow.\n\nIdeally the source code (json, yaml) can be converted directly to this message.\nNaming, triggers and versioning of the workflow itself is out of the scope of this data structure, which is delegated\nto the user/system upon the creation of a workflow.",
      "title": "Workflow Definition"
    },
    "WorkflowStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/WorkflowStatusStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "tasks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TaskStatus"
          },
          "description": "Tasks contains the status of the tasks, with the key being the task id."
        },
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "WorkflowStatusStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "READY",
        "FAILED",
        "DELETED"
      ],
      "default": "PENDING",
      "title": "- READY: PARSING = 1; // During validation/parsing"
    },
    "apiserverHealth": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "apiserverSearchWorkflowResponse": {
      "type": "object",
      "properties": {
        "workflows": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiserverVersionResp": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "apiserverWorkflowIdentifier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "apiserverWorkflowInvocationIdentifier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "apiserverWorkflowInvocationList": {
      "type": "object",
      "properties": {
        "invocations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    }
  }
}
