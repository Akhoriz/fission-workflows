// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/apiserver/apiserver.proto

package apiserver

import (
	context "context"
	fmt "fmt"
	fes "github.com/fission/fission-workflows/pkg/fes"
	types "github.com/fission/fission-workflows/pkg/types"
	version "github.com/fission/fission-workflows/pkg/version"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowList struct {
	Workflows            []string `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowList) Reset()         { *m = WorkflowList{} }
func (m *WorkflowList) String() string { return proto.CompactTextString(m) }
func (*WorkflowList) ProtoMessage()    {}
func (*WorkflowList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e298a2aa07681380, []int{0}
}

func (m *WorkflowList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowList.Unmarshal(m, b)
}
func (m *WorkflowList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowList.Marshal(b, m, deterministic)
}
func (m *WorkflowList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowList.Merge(m, src)
}
func (m *WorkflowList) XXX_Size() int {
	return xxx_messageInfo_WorkflowList.Size(m)
}
func (m *WorkflowList) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowList.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowList proto.InternalMessageInfo

func (m *WorkflowList) GetWorkflows() []string {
	if m != nil {
		return m.Workflows
	}
	return nil
}

type AddTaskRequest struct {
	InvocationID         string      `protobuf:"bytes,1,opt,name=invocationID,proto3" json:"invocationID,omitempty"`
	Task                 *types.Task `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddTaskRequest) Reset()         { *m = AddTaskRequest{} }
func (m *AddTaskRequest) String() string { return proto.CompactTextString(m) }
func (*AddTaskRequest) ProtoMessage()    {}
func (*AddTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e298a2aa07681380, []int{1}
}

func (m *AddTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddTaskRequest.Unmarshal(m, b)
}
func (m *AddTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddTaskRequest.Marshal(b, m, deterministic)
}
func (m *AddTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTaskRequest.Merge(m, src)
}
func (m *AddTaskRequest) XXX_Size() int {
	return xxx_messageInfo_AddTaskRequest.Size(m)
}
func (m *AddTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTaskRequest proto.InternalMessageInfo

func (m *AddTaskRequest) GetInvocationID() string {
	if m != nil {
		return m.InvocationID
	}
	return ""
}

func (m *AddTaskRequest) GetTask() *types.Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type InvocationListQuery struct {
	Workflows            []string `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvocationListQuery) Reset()         { *m = InvocationListQuery{} }
func (m *InvocationListQuery) String() string { return proto.CompactTextString(m) }
func (*InvocationListQuery) ProtoMessage()    {}
func (*InvocationListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e298a2aa07681380, []int{2}
}

func (m *InvocationListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvocationListQuery.Unmarshal(m, b)
}
func (m *InvocationListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvocationListQuery.Marshal(b, m, deterministic)
}
func (m *InvocationListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvocationListQuery.Merge(m, src)
}
func (m *InvocationListQuery) XXX_Size() int {
	return xxx_messageInfo_InvocationListQuery.Size(m)
}
func (m *InvocationListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_InvocationListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_InvocationListQuery proto.InternalMessageInfo

func (m *InvocationListQuery) GetWorkflows() []string {
	if m != nil {
		return m.Workflows
	}
	return nil
}

type WorkflowInvocationList struct {
	Invocations          []string `protobuf:"bytes,1,rep,name=invocations,proto3" json:"invocations,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowInvocationList) Reset()         { *m = WorkflowInvocationList{} }
func (m *WorkflowInvocationList) String() string { return proto.CompactTextString(m) }
func (*WorkflowInvocationList) ProtoMessage()    {}
func (*WorkflowInvocationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e298a2aa07681380, []int{3}
}

func (m *WorkflowInvocationList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowInvocationList.Unmarshal(m, b)
}
func (m *WorkflowInvocationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowInvocationList.Marshal(b, m, deterministic)
}
func (m *WorkflowInvocationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowInvocationList.Merge(m, src)
}
func (m *WorkflowInvocationList) XXX_Size() int {
	return xxx_messageInfo_WorkflowInvocationList.Size(m)
}
func (m *WorkflowInvocationList) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowInvocationList.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowInvocationList proto.InternalMessageInfo

func (m *WorkflowInvocationList) GetInvocations() []string {
	if m != nil {
		return m.Invocations
	}
	return nil
}

type ObjectEvents struct {
	Metadata             *types.ObjectMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Events               []*fes.Event          `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ObjectEvents) Reset()         { *m = ObjectEvents{} }
func (m *ObjectEvents) String() string { return proto.CompactTextString(m) }
func (*ObjectEvents) ProtoMessage()    {}
func (*ObjectEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_e298a2aa07681380, []int{4}
}

func (m *ObjectEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectEvents.Unmarshal(m, b)
}
func (m *ObjectEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectEvents.Marshal(b, m, deterministic)
}
func (m *ObjectEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectEvents.Merge(m, src)
}
func (m *ObjectEvents) XXX_Size() int {
	return xxx_messageInfo_ObjectEvents.Size(m)
}
func (m *ObjectEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectEvents.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectEvents proto.InternalMessageInfo

func (m *ObjectEvents) GetMetadata() *types.ObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ObjectEvents) GetEvents() []*fes.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type Health struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Health) Reset()         { *m = Health{} }
func (m *Health) String() string { return proto.CompactTextString(m) }
func (*Health) ProtoMessage()    {}
func (*Health) Descriptor() ([]byte, []int) {
	return fileDescriptor_e298a2aa07681380, []int{5}
}

func (m *Health) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Health.Unmarshal(m, b)
}
func (m *Health) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Health.Marshal(b, m, deterministic)
}
func (m *Health) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Health.Merge(m, src)
}
func (m *Health) XXX_Size() int {
	return xxx_messageInfo_Health.Size(m)
}
func (m *Health) XXX_DiscardUnknown() {
	xxx_messageInfo_Health.DiscardUnknown(m)
}

var xxx_messageInfo_Health proto.InternalMessageInfo

func (m *Health) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*WorkflowList)(nil), "fission.workflows.apiserver.WorkflowList")
	proto.RegisterType((*AddTaskRequest)(nil), "fission.workflows.apiserver.AddTaskRequest")
	proto.RegisterType((*InvocationListQuery)(nil), "fission.workflows.apiserver.InvocationListQuery")
	proto.RegisterType((*WorkflowInvocationList)(nil), "fission.workflows.apiserver.WorkflowInvocationList")
	proto.RegisterType((*ObjectEvents)(nil), "fission.workflows.apiserver.ObjectEvents")
	proto.RegisterType((*Health)(nil), "fission.workflows.apiserver.Health")
}

func init() { proto.RegisterFile("pkg/apiserver/apiserver.proto", fileDescriptor_e298a2aa07681380) }

var fileDescriptor_e298a2aa07681380 = []byte{
	// 835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xd1, 0x4e, 0xe3, 0x56,
	0x10, 0x95, 0x01, 0x99, 0x64, 0x4c, 0x51, 0x3a, 0x40, 0x08, 0x01, 0x44, 0x7a, 0x51, 0xd5, 0x00,
	0xad, 0xdd, 0x06, 0xa9, 0x0f, 0x54, 0xaa, 0x44, 0x01, 0xb5, 0x91, 0x5a, 0xd1, 0x0d, 0x08, 0x24,
	0xb4, 0x2f, 0x8e, 0x73, 0x93, 0x78, 0x93, 0xd8, 0xc1, 0xbe, 0x09, 0x0a, 0x28, 0x2f, 0xec, 0x0f,
	0xac, 0xb4, 0x8f, 0xfb, 0xb0, 0xcf, 0xfb, 0x09, 0xfb, 0x1d, 0xfb, 0x0b, 0xfb, 0x21, 0x2b, 0x5f,
	0x5f, 0x27, 0x0e, 0xc1, 0x89, 0xa3, 0xd5, 0x3e, 0x40, 0x92, 0xf1, 0xcc, 0x9c, 0x39, 0x73, 0xe7,
	0xcc, 0x35, 0x6c, 0xb7, 0x1b, 0x35, 0x4d, 0x6f, 0x9b, 0x2e, 0x75, 0xba, 0xd4, 0x19, 0x7e, 0x53,
	0xdb, 0x8e, 0xcd, 0x6c, 0xdc, 0xac, 0x9a, 0xae, 0x6b, 0xda, 0x96, 0x7a, 0x67, 0x3b, 0x8d, 0x6a,
	0xd3, 0xbe, 0x73, 0xd5, 0x81, 0x4b, 0xf6, 0xa8, 0x66, 0xb2, 0x7a, 0xa7, 0xac, 0x1a, 0x76, 0x4b,
	0x13, 0x7e, 0xc1, 0xe7, 0x2f, 0x03, 0x7f, 0xcd, 0x03, 0x60, 0xbd, 0x36, 0x75, 0xfd, 0xff, 0x7e,
	0xe2, 0xec, 0x9f, 0xb1, 0x63, 0xbb, 0xd4, 0xe1, 0x4f, 0xc5, 0xa7, 0x88, 0xff, 0x3d, 0x76, 0x7c,
	0x95, 0xba, 0xde, 0x9f, 0x88, 0xdb, 0xac, 0xd9, 0x76, 0xad, 0x49, 0x35, 0xfe, 0xab, 0xdc, 0xa9,
	0x6a, 0xb4, 0xd5, 0x66, 0x3d, 0xf1, 0x70, 0x4b, 0x3c, 0xd4, 0xdb, 0xa6, 0xa6, 0x5b, 0x96, 0xcd,
	0x74, 0x66, 0xda, 0x96, 0x08, 0x25, 0x3f, 0xc3, 0xd2, 0xb5, 0xc8, 0xfc, 0xaf, 0xe9, 0x32, 0xdc,
	0x82, 0xe4, 0x00, 0x29, 0x23, 0xe5, 0xe6, 0xf3, 0xc9, 0xd2, 0xd0, 0x40, 0x6a, 0xb0, 0x7c, 0x5c,
	0xa9, 0x5c, 0xea, 0x6e, 0xa3, 0x44, 0x6f, 0x3b, 0xd4, 0x65, 0x48, 0x60, 0xc9, 0xb4, 0xba, 0xb6,
	0xc1, 0x93, 0x16, 0x4f, 0x33, 0x52, 0x4e, 0xca, 0x27, 0x4b, 0x23, 0x36, 0xfc, 0x0d, 0x16, 0x98,
	0xee, 0x36, 0x32, 0x73, 0x39, 0x29, 0xaf, 0x14, 0xb6, 0xd5, 0xf1, 0xf6, 0xfb, 0x4d, 0xe4, 0x79,
	0xb9, 0x2b, 0x39, 0x84, 0x95, 0xe2, 0x20, 0x85, 0x57, 0xd8, 0x8b, 0x0e, 0x75, 0x7a, 0x53, 0xaa,
	0x3b, 0x82, 0x74, 0xc0, 0x65, 0x34, 0x18, 0x73, 0xa0, 0x0c, 0x2b, 0x0a, 0x22, 0xc3, 0x26, 0xf2,
	0x46, 0x82, 0xa5, 0xf3, 0xf2, 0x2b, 0x6a, 0xb0, 0xb3, 0x2e, 0xb5, 0x98, 0x8b, 0x27, 0x90, 0x68,
	0x51, 0xa6, 0x57, 0x74, 0xa6, 0x73, 0x52, 0x4a, 0xe1, 0xa7, 0xc8, 0xc2, 0xfd, 0xc0, 0xff, 0x84,
	0x7b, 0x69, 0x10, 0x88, 0x7f, 0x80, 0x4c, 0x79, 0xba, 0xcc, 0x5c, 0x6e, 0x3e, 0xaf, 0x14, 0x76,
	0x9f, 0x49, 0xe1, 0x3b, 0x30, 0xdb, 0xa1, 0x2a, 0x87, 0x2e, 0x89, 0x10, 0x92, 0x03, 0xf9, 0x1f,
	0xaa, 0x37, 0x59, 0x1d, 0xd3, 0x20, 0xbb, 0x4c, 0x67, 0x1d, 0x57, 0xb4, 0x57, 0xfc, 0x2a, 0xbc,
	0x96, 0x41, 0x09, 0x18, 0x1f, 0xff, 0x5f, 0x44, 0x0b, 0xe4, 0x13, 0x87, 0xea, 0x8c, 0xe2, 0x8f,
	0x91, 0xb5, 0x06, 0xfe, 0x17, 0x6d, 0x6a, 0x64, 0xe3, 0x52, 0x22, 0xab, 0x8f, 0x9f, 0x3e, 0xbf,
	0x9d, 0x5b, 0x26, 0x49, 0x2d, 0x70, 0x3c, 0x92, 0xf6, 0xf1, 0x16, 0xc0, 0xc7, 0xbb, 0xe8, 0x59,
	0x46, 0x5c, 0xcc, 0x1f, 0xa6, 0xba, 0x91, 0x0d, 0x8e, 0xb6, 0x42, 0x96, 0x07, 0x68, 0x9a, 0xdb,
	0xb3, 0x0c, 0x0f, 0xf2, 0x25, 0x2c, 0xf0, 0x13, 0x4d, 0xab, 0xfe, 0x58, 0xab, 0xc1, 0xcc, 0xab,
	0x67, 0xde, 0xcc, 0x67, 0xf7, 0xd4, 0x09, 0xe2, 0x56, 0xc3, 0xa3, 0x4e, 0xbe, 0xe7, 0x28, 0x0a,
	0x0e, 0x39, 0xa1, 0x09, 0xf3, 0x7f, 0x53, 0x86, 0x71, 0xdb, 0x12, 0x87, 0x4b, 0x9a, 0xa3, 0xa4,
	0x30, 0xc4, 0xe5, 0xc1, 0xac, 0xf4, 0x51, 0x07, 0xf9, 0x94, 0x36, 0x29, 0xa3, 0xf1, 0xd1, 0x22,
	0x38, 0x07, 0x10, 0xfb, 0x4f, 0x21, 0xea, 0x90, 0xb8, 0xd2, 0x9b, 0x66, 0x65, 0x86, 0x81, 0x88,
	0x82, 0xd8, 0xe6, 0x10, 0xeb, 0x04, 0x87, 0x10, 0x5d, 0x91, 0xda, 0x3b, 0x95, 0x07, 0x90, 0x85,
	0x6c, 0x62, 0x93, 0x99, 0x7c, 0x50, 0x61, 0x29, 0x06, 0xe0, 0xb8, 0x36, 0xca, 0x4f, 0xf3, 0x75,
	0x52, 0xf8, 0x90, 0x80, 0xb5, 0x71, 0xdd, 0x7b, 0x7a, 0xb8, 0x07, 0xd9, 0x33, 0x34, 0x28, 0x6a,
	0x53, 0xe9, 0x0f, 0x23, 0x67, 0x53, 0x86, 0x68, 0x3e, 0x51, 0xb4, 0xe1, 0x3a, 0xf1, 0x5a, 0xf2,
	0x4e, 0x02, 0xf0, 0xc1, 0xb9, 0x38, 0x66, 0x2e, 0xe0, 0x60, 0x86, 0x00, 0xa2, 0xf1, 0x22, 0xf6,
	0x48, 0x2a, 0x54, 0x44, 0x20, 0x99, 0x1b, 0xc4, 0x31, 0x33, 0xbe, 0x97, 0x60, 0x51, 0x6c, 0x72,
	0x3c, 0x98, 0x78, 0x12, 0xa3, 0xfb, 0x3e, 0x72, 0x40, 0xce, 0x79, 0x05, 0x45, 0x92, 0x0b, 0x43,
	0x3d, 0x84, 0xaf, 0x81, 0xbe, 0xe6, 0x6d, 0x76, 0xd7, 0xab, 0x88, 0x64, 0xa7, 0xba, 0xa1, 0x01,
	0xf2, 0x89, 0x6e, 0x19, 0xb4, 0xf9, 0xf5, 0xfa, 0xc8, 0xf0, 0xda, 0x70, 0x3f, 0x35, 0x0a, 0x5a,
	0xe9, 0xe3, 0xa3, 0x24, 0xd6, 0xc9, 0xaf, 0x13, 0x7b, 0xf0, 0xcc, 0x55, 0x94, 0x3d, 0x8c, 0xb5,
	0x68, 0x46, 0x23, 0xc9, 0x0a, 0xaf, 0xe4, 0x3b, 0x0c, 0x0f, 0x0b, 0x76, 0x66, 0x5c, 0x3a, 0x33,
	0x4d, 0x86, 0xe0, 0x8e, 0xe3, 0xdc, 0xfb, 0xdf, 0x54, 0xb3, 0x3b, 0x1c, 0x77, 0x03, 0xd7, 0x9f,
	0xe2, 0x0a, 0xd5, 0x22, 0x0b, 0x2d, 0xa7, 0x99, 0xc5, 0x11, 0x75, 0xd2, 0x02, 0x95, 0xac, 0x86,
	0x51, 0x43, 0x8b, 0xaa, 0xf0, 0x51, 0x82, 0xc4, 0x71, 0xa5, 0x65, 0xf2, 0xf5, 0x70, 0x0d, 0xf2,
	0x05, 0xbf, 0x48, 0x23, 0x6f, 0x93, 0xdd, 0x89, 0x84, 0xfd, 0xdb, 0x99, 0xa4, 0x38, 0x28, 0x60,
	0x42, 0xab, 0x73, 0xc3, 0x3d, 0x5e, 0xc2, 0xe2, 0x95, 0xff, 0x62, 0x17, 0x99, 0x79, 0xe7, 0x99,
	0xcc, 0xc1, 0xcb, 0x60, 0xd1, 0xaa, 0xda, 0xa1, 0xac, 0xc2, 0xfc, 0x97, 0x72, 0x93, 0x1c, 0x60,
	0x97, 0x65, 0x9e, 0xef, 0xf0, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xab, 0xd0, 0x49, 0xeb,
	0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkflowAPIClient is the client API for WorkflowAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowAPIClient interface {
	Create(ctx context.Context, in *types.WorkflowSpec, opts ...grpc.CallOption) (*types.ObjectMetadata, error)
	CreateSync(ctx context.Context, in *types.WorkflowSpec, opts ...grpc.CallOption) (*types.Workflow, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorkflowList, error)
	Get(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*types.Workflow, error)
	Delete(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*empty.Empty, error)
	Validate(ctx context.Context, in *types.WorkflowSpec, opts ...grpc.CallOption) (*empty.Empty, error)
	Events(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*ObjectEvents, error)
}

type workflowAPIClient struct {
	cc *grpc.ClientConn
}

func NewWorkflowAPIClient(cc *grpc.ClientConn) WorkflowAPIClient {
	return &workflowAPIClient{cc}
}

func (c *workflowAPIClient) Create(ctx context.Context, in *types.WorkflowSpec, opts ...grpc.CallOption) (*types.ObjectMetadata, error) {
	out := new(types.ObjectMetadata)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIClient) CreateSync(ctx context.Context, in *types.WorkflowSpec, opts ...grpc.CallOption) (*types.Workflow, error) {
	out := new(types.Workflow)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowAPI/CreateSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorkflowList, error) {
	out := new(WorkflowList)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIClient) Get(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*types.Workflow, error) {
	out := new(types.Workflow)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIClient) Delete(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIClient) Validate(ctx context.Context, in *types.WorkflowSpec, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowAPI/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIClient) Events(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*ObjectEvents, error) {
	out := new(ObjectEvents)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowAPI/Events", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowAPIServer is the server API for WorkflowAPI service.
type WorkflowAPIServer interface {
	Create(context.Context, *types.WorkflowSpec) (*types.ObjectMetadata, error)
	CreateSync(context.Context, *types.WorkflowSpec) (*types.Workflow, error)
	List(context.Context, *empty.Empty) (*WorkflowList, error)
	Get(context.Context, *types.ObjectMetadata) (*types.Workflow, error)
	Delete(context.Context, *types.ObjectMetadata) (*empty.Empty, error)
	Validate(context.Context, *types.WorkflowSpec) (*empty.Empty, error)
	Events(context.Context, *types.ObjectMetadata) (*ObjectEvents, error)
}

func RegisterWorkflowAPIServer(s *grpc.Server, srv WorkflowAPIServer) {
	s.RegisterService(&_WorkflowAPI_serviceDesc, srv)
}

func _WorkflowAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WorkflowSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServer).Create(ctx, req.(*types.WorkflowSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPI_CreateSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WorkflowSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServer).CreateSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowAPI/CreateSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServer).CreateSync(ctx, req.(*types.WorkflowSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ObjectMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServer).Get(ctx, req.(*types.ObjectMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ObjectMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServer).Delete(ctx, req.(*types.ObjectMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPI_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WorkflowSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowAPI/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServer).Validate(ctx, req.(*types.WorkflowSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowAPI_Events_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ObjectMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowAPIServer).Events(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowAPI/Events",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowAPIServer).Events(ctx, req.(*types.ObjectMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fission.workflows.apiserver.WorkflowAPI",
	HandlerType: (*WorkflowAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WorkflowAPI_Create_Handler,
		},
		{
			MethodName: "CreateSync",
			Handler:    _WorkflowAPI_CreateSync_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WorkflowAPI_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WorkflowAPI_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WorkflowAPI_Delete_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _WorkflowAPI_Validate_Handler,
		},
		{
			MethodName: "Events",
			Handler:    _WorkflowAPI_Events_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apiserver.proto",
}

// WorkflowInvocationAPIClient is the client API for WorkflowInvocationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowInvocationAPIClient interface {
	// Create a new workflow invocation
	//
	// In case the invocation specification is missing fields or contains invalid fields, a HTTP 400 is returned.
	Invoke(ctx context.Context, in *types.WorkflowInvocationSpec, opts ...grpc.CallOption) (*types.ObjectMetadata, error)
	InvokeSync(ctx context.Context, in *types.WorkflowInvocationSpec, opts ...grpc.CallOption) (*types.WorkflowInvocation, error)
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Cancel a workflow invocation
	//
	// This action is irreverisble. A canceled invocation cannot be resumed or restarted.
	// In case that an invocation already is canceled, has failed or has completed, nothing happens.
	// In case that an invocation does not exist a HTTP 404 error status is returned.
	Cancel(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *InvocationListQuery, opts ...grpc.CallOption) (*WorkflowInvocationList, error)
	// Get the specification and status of a workflow invocation
	//
	// Get returns three different aspects of the workflow invocation, namely the spec (specification), status and logs.
	// To lighten the request load, consider using a more specific request.
	Get(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*types.WorkflowInvocation, error)
	Events(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*ObjectEvents, error)
	Validate(ctx context.Context, in *types.WorkflowInvocationSpec, opts ...grpc.CallOption) (*empty.Empty, error)
}

type workflowInvocationAPIClient struct {
	cc *grpc.ClientConn
}

func NewWorkflowInvocationAPIClient(cc *grpc.ClientConn) WorkflowInvocationAPIClient {
	return &workflowInvocationAPIClient{cc}
}

func (c *workflowInvocationAPIClient) Invoke(ctx context.Context, in *types.WorkflowInvocationSpec, opts ...grpc.CallOption) (*types.ObjectMetadata, error) {
	out := new(types.ObjectMetadata)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowInvocationAPI/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowInvocationAPIClient) InvokeSync(ctx context.Context, in *types.WorkflowInvocationSpec, opts ...grpc.CallOption) (*types.WorkflowInvocation, error) {
	out := new(types.WorkflowInvocation)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowInvocationAPI/InvokeSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowInvocationAPIClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowInvocationAPI/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowInvocationAPIClient) Cancel(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowInvocationAPI/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowInvocationAPIClient) List(ctx context.Context, in *InvocationListQuery, opts ...grpc.CallOption) (*WorkflowInvocationList, error) {
	out := new(WorkflowInvocationList)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowInvocationAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowInvocationAPIClient) Get(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*types.WorkflowInvocation, error) {
	out := new(types.WorkflowInvocation)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowInvocationAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowInvocationAPIClient) Events(ctx context.Context, in *types.ObjectMetadata, opts ...grpc.CallOption) (*ObjectEvents, error) {
	out := new(ObjectEvents)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowInvocationAPI/Events", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowInvocationAPIClient) Validate(ctx context.Context, in *types.WorkflowInvocationSpec, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.WorkflowInvocationAPI/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowInvocationAPIServer is the server API for WorkflowInvocationAPI service.
type WorkflowInvocationAPIServer interface {
	// Create a new workflow invocation
	//
	// In case the invocation specification is missing fields or contains invalid fields, a HTTP 400 is returned.
	Invoke(context.Context, *types.WorkflowInvocationSpec) (*types.ObjectMetadata, error)
	InvokeSync(context.Context, *types.WorkflowInvocationSpec) (*types.WorkflowInvocation, error)
	AddTask(context.Context, *AddTaskRequest) (*empty.Empty, error)
	// Cancel a workflow invocation
	//
	// This action is irreverisble. A canceled invocation cannot be resumed or restarted.
	// In case that an invocation already is canceled, has failed or has completed, nothing happens.
	// In case that an invocation does not exist a HTTP 404 error status is returned.
	Cancel(context.Context, *types.ObjectMetadata) (*empty.Empty, error)
	List(context.Context, *InvocationListQuery) (*WorkflowInvocationList, error)
	// Get the specification and status of a workflow invocation
	//
	// Get returns three different aspects of the workflow invocation, namely the spec (specification), status and logs.
	// To lighten the request load, consider using a more specific request.
	Get(context.Context, *types.ObjectMetadata) (*types.WorkflowInvocation, error)
	Events(context.Context, *types.ObjectMetadata) (*ObjectEvents, error)
	Validate(context.Context, *types.WorkflowInvocationSpec) (*empty.Empty, error)
}

func RegisterWorkflowInvocationAPIServer(s *grpc.Server, srv WorkflowInvocationAPIServer) {
	s.RegisterService(&_WorkflowInvocationAPI_serviceDesc, srv)
}

func _WorkflowInvocationAPI_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WorkflowInvocationSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowInvocationAPIServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowInvocationAPI/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowInvocationAPIServer).Invoke(ctx, req.(*types.WorkflowInvocationSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowInvocationAPI_InvokeSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WorkflowInvocationSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowInvocationAPIServer).InvokeSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowInvocationAPI/InvokeSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowInvocationAPIServer).InvokeSync(ctx, req.(*types.WorkflowInvocationSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowInvocationAPI_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowInvocationAPIServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowInvocationAPI/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowInvocationAPIServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowInvocationAPI_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ObjectMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowInvocationAPIServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowInvocationAPI/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowInvocationAPIServer).Cancel(ctx, req.(*types.ObjectMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowInvocationAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvocationListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowInvocationAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowInvocationAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowInvocationAPIServer).List(ctx, req.(*InvocationListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowInvocationAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ObjectMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowInvocationAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowInvocationAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowInvocationAPIServer).Get(ctx, req.(*types.ObjectMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowInvocationAPI_Events_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.ObjectMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowInvocationAPIServer).Events(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowInvocationAPI/Events",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowInvocationAPIServer).Events(ctx, req.(*types.ObjectMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowInvocationAPI_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.WorkflowInvocationSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowInvocationAPIServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.WorkflowInvocationAPI/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowInvocationAPIServer).Validate(ctx, req.(*types.WorkflowInvocationSpec))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowInvocationAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fission.workflows.apiserver.WorkflowInvocationAPI",
	HandlerType: (*WorkflowInvocationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _WorkflowInvocationAPI_Invoke_Handler,
		},
		{
			MethodName: "InvokeSync",
			Handler:    _WorkflowInvocationAPI_InvokeSync_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _WorkflowInvocationAPI_AddTask_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _WorkflowInvocationAPI_Cancel_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WorkflowInvocationAPI_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WorkflowInvocationAPI_Get_Handler,
		},
		{
			MethodName: "Events",
			Handler:    _WorkflowInvocationAPI_Events_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _WorkflowInvocationAPI_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apiserver.proto",
}

// AdminAPIClient is the client API for AdminAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminAPIClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Health, error)
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*version.Info, error)
}

type adminAPIClient struct {
	cc *grpc.ClientConn
}

func NewAdminAPIClient(cc *grpc.ClientConn) AdminAPIClient {
	return &adminAPIClient{cc}
}

func (c *adminAPIClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.AdminAPI/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*version.Info, error) {
	out := new(version.Info)
	err := c.cc.Invoke(ctx, "/fission.workflows.apiserver.AdminAPI/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAPIServer is the server API for AdminAPI service.
type AdminAPIServer interface {
	Status(context.Context, *empty.Empty) (*Health, error)
	Version(context.Context, *empty.Empty) (*version.Info, error)
}

func RegisterAdminAPIServer(s *grpc.Server, srv AdminAPIServer) {
	s.RegisterService(&_AdminAPI_serviceDesc, srv)
}

func _AdminAPI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.AdminAPI/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fission.workflows.apiserver.AdminAPI/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fission.workflows.apiserver.AdminAPI",
	HandlerType: (*AdminAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _AdminAPI_Status_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _AdminAPI_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apiserver.proto",
}
