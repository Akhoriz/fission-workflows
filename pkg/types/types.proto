syntax = "proto3";

option go_package = "types";

import "google/protobuf/timestamp.proto";

// Common
message ObjectMetadata {
    string id = 1;
    google.protobuf.Timestamp createdAt = 3;
}

// Workflow Model
message Workflow {
    ObjectMetadata metadata = 1;
    WorkflowSpec spec = 2;
    WorkflowStatus status = 3;
}

// Task Invocation Model
message TaskInvocation {
    ObjectMetadata metadata = 1;
    TaskInvocationSpec spec = 2;
    TaskInvocationStatus status = 3;
}

message TaskInvocationSpec {
    // Id of the task to be invoked (no ambiguatity at this point
    TaskTypeDef type = 1;
    string taskId = 2; // task in workflow
    map<string, TypedValue> inputs = 3;
}

message TaskInvocationStatus {
    enum Status {
        UNKNOWN = 0;
        SCHEDULED = 1; // Arrived at engine, but not yet schedu
        IN_PROGRESS = 2; // Scheduled
        SUCCEEDED = 3;
        FAILED = 4;
        ABORTED = 5;
        SKIPPED = 6;
    }
    Status status = 1;
    google.protobuf.Timestamp updatedAt = 2;
    TypedValue output = 3;
    Error error = 4; // Only set when status == failed
}

// Workflow Invocation Model
message WorkflowInvocationSpec {
    string workflowId = 1;
    map<string, TypedValue> inputs = 3;
}

message WorkflowInvocationStatus {
    enum Status {
        UNKNOWN = 0;
        SCHEDULED = 1; // Arrived at engine, but not yet schedu
        IN_PROGRESS = 2; // Scheduled
        SUCCEEDED = 3;
        FAILED = 4;
        ABORTED = 5;
        //PAUSED = 6;
    }
    Status status = 1;
    google.protobuf.Timestamp updatedAt = 2;
    map<string, TaskInvocation> tasks = 3;
    TypedValue output = 4;
    map<string, Task> dynamicTasks = 5;
    Error error = 6; // Only set when status == failed
}


message WorkflowInvocation {
    ObjectMetadata metadata = 1;
    WorkflowInvocationSpec spec = 2;
    WorkflowInvocationStatus status = 3;
}

// Workflow Definition
//
// The workflowDefinition contains the definition of a workflow.
//
// Ideally the source code (json, yaml) can be converted directly to this message.
// Naming, triggers and versioning of the workflow itself is out of the scope of this data structure, which is delegated
// to the user/system upon the creation of a workflow.
message WorkflowSpec {

    // apiVersion describes what version is of the workflow definition.
    // By default the workflow engine will assume the latest version to be used.
    string apiVersion = 1;

    // TODO Parameters
    // Dependency graph is build into the tasks
    map<string, Task> tasks = 2; // key = taskId

    // From which task should the workflow return the output? Future: multiple? Implicit?
    string outputTask = 3;

    string description = 4;

    // TODO move outside of spec
    // The UID that the workflow should have. Only use this in case you want to force a specific UID.
    string id = 5;

    // Name is solely for human-readablity
    string name = 6;
}

// A task is the primitive unit of a workflow, representing an action that needs to be performed in order to continue.
//
// A task as a number of inputs and exactly two outputs
// Id is specified outside of task
message Task {

    // Same as the string in the map<string, Task> definition. One needs to be set.
    //
    // If there is a conflict the map key gets precendence over this field.
    string id = 1;

    // Name/identifier of the function
    string functionRef = 3; // TODO refactor to fission.FunctionRef struct here

    map<string, TypedValue> inputs = 4;

    // Dependencies for this task to execute
    map<string, TaskDependencyParameters> requires = 5;

    // Number of dependencies to wait for
    int32 await = 6;

    // Transform the output, or override the output with a literal
    TypedValue output = 7;
}

message TaskDependencyParameters {

    enum DependencyType {
        DATA = 0;
        CONTROL = 1;
        DYNAMIC_OUTPUT = 2;
    }
    DependencyType type = 1;
    string alias = 2;
}

// Internal
message WorkflowStatus {
    enum Status {
        UNKNOWN = 0;
//        PARSING = 1; // During validation/parsing
        READY = 2;
        FAILED = 3;
        DELETED = 4;
    }
    Status status = 1;
    google.protobuf.Timestamp updatedAt = 2;
    map<string, TaskTypeDef> resolvedTasks = 3; // Key = taskId
    Error error = 4;
}

message TaskTypeDef {
    string src = 1; // TODO allow fission.FunctionRef struct here
    string runtime = 2; // Function Execution Runtime
    string resolved = 3; // Address (Uid) to the function
}

// Copy of protobuf's Any, to avoid protobuf requirement of a protobuf-based type.
message TypedValue {
    string type = 1; // (string, bool, int...)
    bytes value = 2;
    // TODO encoding (json, xml, binary)
    // TODO annotations (content-type: application/xml)
}

message Error {
    string code = 1;
    string message = 2;
}
