// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/types/events/events.proto

/*
Package events is a generated protocol buffer package.

It is generated from these files:
	pkg/types/events/events.proto

It has these top-level messages:
	EventWrapper
	WorkflowCreated
	WorkflowDeleted
	WorkflowParsed
	WorkflowParsingFailed
	InvocationCreated
	InvocationCompleted
	InvocationCanceled
	InvocationTaskAdded
	InvocationFailed
	TaskStarted
	TaskSucceeded
	TaskSkipped
	TaskFailed
*/
package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import fission_workflows_types "github.com/fission/fission-workflows/pkg/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventWrapper struct {
	Any string `protobuf:"bytes,1,opt,name=any" json:"any,omitempty"`
}

func (m *EventWrapper) Reset()                    { *m = EventWrapper{} }
func (m *EventWrapper) String() string            { return proto.CompactTextString(m) }
func (*EventWrapper) ProtoMessage()               {}
func (*EventWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventWrapper) GetAny() string {
	if m != nil {
		return m.Any
	}
	return ""
}

type WorkflowCreated struct {
	Spec *fission_workflows_types.WorkflowSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *WorkflowCreated) Reset()                    { *m = WorkflowCreated{} }
func (m *WorkflowCreated) String() string            { return proto.CompactTextString(m) }
func (*WorkflowCreated) ProtoMessage()               {}
func (*WorkflowCreated) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WorkflowCreated) GetSpec() *fission_workflows_types.WorkflowSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type WorkflowDeleted struct {
}

func (m *WorkflowDeleted) Reset()                    { *m = WorkflowDeleted{} }
func (m *WorkflowDeleted) String() string            { return proto.CompactTextString(m) }
func (*WorkflowDeleted) ProtoMessage()               {}
func (*WorkflowDeleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type WorkflowParsed struct {
	Tasks map[string]*fission_workflows_types.TaskStatus `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WorkflowParsed) Reset()                    { *m = WorkflowParsed{} }
func (m *WorkflowParsed) String() string            { return proto.CompactTextString(m) }
func (*WorkflowParsed) ProtoMessage()               {}
func (*WorkflowParsed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WorkflowParsed) GetTasks() map[string]*fission_workflows_types.TaskStatus {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type WorkflowParsingFailed struct {
	Error *fission_workflows_types.Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *WorkflowParsingFailed) Reset()                    { *m = WorkflowParsingFailed{} }
func (m *WorkflowParsingFailed) String() string            { return proto.CompactTextString(m) }
func (*WorkflowParsingFailed) ProtoMessage()               {}
func (*WorkflowParsingFailed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WorkflowParsingFailed) GetError() *fission_workflows_types.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type InvocationCreated struct {
	Spec *fission_workflows_types.WorkflowInvocationSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *InvocationCreated) Reset()                    { *m = InvocationCreated{} }
func (m *InvocationCreated) String() string            { return proto.CompactTextString(m) }
func (*InvocationCreated) ProtoMessage()               {}
func (*InvocationCreated) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InvocationCreated) GetSpec() *fission_workflows_types.WorkflowInvocationSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type InvocationCompleted struct {
	Output *fission_workflows_types.TypedValue `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *InvocationCompleted) Reset()                    { *m = InvocationCompleted{} }
func (m *InvocationCompleted) String() string            { return proto.CompactTextString(m) }
func (*InvocationCompleted) ProtoMessage()               {}
func (*InvocationCompleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InvocationCompleted) GetOutput() *fission_workflows_types.TypedValue {
	if m != nil {
		return m.Output
	}
	return nil
}

type InvocationCanceled struct {
	Error *fission_workflows_types.Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *InvocationCanceled) Reset()                    { *m = InvocationCanceled{} }
func (m *InvocationCanceled) String() string            { return proto.CompactTextString(m) }
func (*InvocationCanceled) ProtoMessage()               {}
func (*InvocationCanceled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InvocationCanceled) GetError() *fission_workflows_types.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type InvocationTaskAdded struct {
	Task *fission_workflows_types.Task `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
}

func (m *InvocationTaskAdded) Reset()                    { *m = InvocationTaskAdded{} }
func (m *InvocationTaskAdded) String() string            { return proto.CompactTextString(m) }
func (*InvocationTaskAdded) ProtoMessage()               {}
func (*InvocationTaskAdded) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *InvocationTaskAdded) GetTask() *fission_workflows_types.Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type InvocationFailed struct {
	Error *fission_workflows_types.Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *InvocationFailed) Reset()                    { *m = InvocationFailed{} }
func (m *InvocationFailed) String() string            { return proto.CompactTextString(m) }
func (*InvocationFailed) ProtoMessage()               {}
func (*InvocationFailed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *InvocationFailed) GetError() *fission_workflows_types.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

//
// Task
//
// TODO why do we need task, and not just task spec.
type TaskStarted struct {
	Spec *fission_workflows_types.TaskInvocationSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *TaskStarted) Reset()                    { *m = TaskStarted{} }
func (m *TaskStarted) String() string            { return proto.CompactTextString(m) }
func (*TaskStarted) ProtoMessage()               {}
func (*TaskStarted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TaskStarted) GetSpec() *fission_workflows_types.TaskInvocationSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type TaskSucceeded struct {
	Result *fission_workflows_types.TaskInvocationStatus `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *TaskSucceeded) Reset()                    { *m = TaskSucceeded{} }
func (m *TaskSucceeded) String() string            { return proto.CompactTextString(m) }
func (*TaskSucceeded) ProtoMessage()               {}
func (*TaskSucceeded) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TaskSucceeded) GetResult() *fission_workflows_types.TaskInvocationStatus {
	if m != nil {
		return m.Result
	}
	return nil
}

type TaskSkipped struct {
}

func (m *TaskSkipped) Reset()                    { *m = TaskSkipped{} }
func (m *TaskSkipped) String() string            { return proto.CompactTextString(m) }
func (*TaskSkipped) ProtoMessage()               {}
func (*TaskSkipped) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type TaskFailed struct {
	Error *fission_workflows_types.Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *TaskFailed) Reset()                    { *m = TaskFailed{} }
func (m *TaskFailed) String() string            { return proto.CompactTextString(m) }
func (*TaskFailed) ProtoMessage()               {}
func (*TaskFailed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TaskFailed) GetError() *fission_workflows_types.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*EventWrapper)(nil), "fission.workflows.events.EventWrapper")
	proto.RegisterType((*WorkflowCreated)(nil), "fission.workflows.events.WorkflowCreated")
	proto.RegisterType((*WorkflowDeleted)(nil), "fission.workflows.events.WorkflowDeleted")
	proto.RegisterType((*WorkflowParsed)(nil), "fission.workflows.events.WorkflowParsed")
	proto.RegisterType((*WorkflowParsingFailed)(nil), "fission.workflows.events.WorkflowParsingFailed")
	proto.RegisterType((*InvocationCreated)(nil), "fission.workflows.events.InvocationCreated")
	proto.RegisterType((*InvocationCompleted)(nil), "fission.workflows.events.InvocationCompleted")
	proto.RegisterType((*InvocationCanceled)(nil), "fission.workflows.events.InvocationCanceled")
	proto.RegisterType((*InvocationTaskAdded)(nil), "fission.workflows.events.InvocationTaskAdded")
	proto.RegisterType((*InvocationFailed)(nil), "fission.workflows.events.InvocationFailed")
	proto.RegisterType((*TaskStarted)(nil), "fission.workflows.events.TaskStarted")
	proto.RegisterType((*TaskSucceeded)(nil), "fission.workflows.events.TaskSucceeded")
	proto.RegisterType((*TaskSkipped)(nil), "fission.workflows.events.TaskSkipped")
	proto.RegisterType((*TaskFailed)(nil), "fission.workflows.events.TaskFailed")
}

func init() { proto.RegisterFile("pkg/types/events/events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xe1, 0x6b, 0xd4, 0x30,
	0x18, 0xc6, 0xe9, 0xb6, 0x3b, 0xf4, 0x3d, 0xa7, 0x5b, 0x44, 0x38, 0x06, 0x93, 0x23, 0x22, 0x0c,
	0x64, 0x2d, 0x6e, 0x7e, 0x70, 0xf3, 0x83, 0xb8, 0x79, 0xb2, 0x89, 0x8a, 0x74, 0xb2, 0x89, 0xe0,
	0x87, 0xac, 0x79, 0x77, 0x96, 0x76, 0x4d, 0x48, 0xd2, 0x1b, 0xfd, 0xd7, 0xfc, 0xeb, 0x24, 0x4d,
	0xba, 0xf6, 0xd0, 0x3b, 0xc5, 0xfb, 0xd2, 0x94, 0xf4, 0x7d, 0x7e, 0x7d, 0x9f, 0xe7, 0x4d, 0x0b,
	0xdb, 0x32, 0x9b, 0x44, 0xa6, 0x92, 0xa8, 0x23, 0x9c, 0x62, 0x61, 0x9a, 0x25, 0x94, 0x4a, 0x18,
	0x41, 0x86, 0x57, 0xa9, 0xd6, 0xa9, 0x28, 0xc2, 0x1b, 0xa1, 0xb2, 0xab, 0x5c, 0xdc, 0xe8, 0xd0,
	0x3d, 0xdf, 0x3a, 0x9c, 0xa4, 0xe6, 0x47, 0x79, 0x19, 0x26, 0xe2, 0x3a, 0xf2, 0x45, 0xcd, 0xba,
	0x7b, 0x5b, 0x1c, 0xb5, 0xf4, 0xfa, 0xea, 0xa8, 0x74, 0x04, 0xf7, 0xc6, 0x96, 0x72, 0xa1, 0x98,
	0x94, 0xa8, 0xc8, 0x06, 0xac, 0xb2, 0xa2, 0x1a, 0x06, 0xa3, 0x60, 0xe7, 0x6e, 0x6c, 0x6f, 0xe9,
	0x07, 0x78, 0x70, 0xe1, 0x21, 0xc7, 0x0a, 0x99, 0x41, 0x4e, 0x0e, 0x60, 0x4d, 0x4b, 0x4c, 0xea,
	0xaa, 0xc1, 0xde, 0xd3, 0xf0, 0xf7, 0xce, 0xdc, 0x2b, 0x1a, 0xdd, 0x99, 0xc4, 0x24, 0xae, 0x25,
	0x74, 0xb3, 0xa5, 0xbd, 0xc5, 0x1c, 0x0d, 0x72, 0xfa, 0x33, 0x80, 0xfb, 0xcd, 0xde, 0x67, 0xa6,
	0x34, 0x72, 0x72, 0x0a, 0x3d, 0xc3, 0x74, 0xa6, 0x87, 0xc1, 0x68, 0x75, 0x67, 0xb0, 0xb7, 0x1f,
	0xce, 0xf3, 0x1e, 0xce, 0x0a, 0xc3, 0x2f, 0x56, 0x35, 0x2e, 0x8c, 0xaa, 0x62, 0x47, 0xd8, 0xfa,
	0x0e, 0xd0, 0x6e, 0x5a, 0x7b, 0x19, 0xde, 0xda, 0xcb, 0xb0, 0x22, 0x07, 0xd0, 0x9b, 0xb2, 0xbc,
	0xc4, 0xe1, 0x4a, 0x6d, 0xe6, 0xc9, 0x5c, 0x33, 0x96, 0x72, 0x66, 0x98, 0x29, 0x75, 0xec, 0x14,
	0x87, 0x2b, 0x2f, 0x03, 0xfa, 0x11, 0x1e, 0x75, 0x5b, 0x48, 0x8b, 0xc9, 0x3b, 0x96, 0xe6, 0xc8,
	0xc9, 0x0b, 0xe8, 0xa1, 0x52, 0x42, 0xf9, 0x90, 0x1e, 0xcf, 0xe5, 0x8e, 0x6d, 0x55, 0xec, 0x8a,
	0xe9, 0x57, 0xd8, 0x3c, 0x2d, 0xa6, 0x22, 0x61, 0x26, 0x15, 0x45, 0x13, 0xf7, 0xf1, 0x4c, 0xdc,
	0xd1, 0x5f, 0xe3, 0x6e, 0x09, 0x9d, 0xe0, 0x63, 0x78, 0xd8, 0x21, 0x8b, 0x6b, 0x59, 0x87, 0x4f,
	0x5e, 0x41, 0x5f, 0x94, 0x46, 0x96, 0xc6, 0xd3, 0x17, 0xf8, 0xaf, 0x24, 0xf2, 0x73, 0x6b, 0x3c,
	0xf6, 0x12, 0xfa, 0x1e, 0x48, 0x87, 0xc9, 0x8a, 0x04, 0xff, 0xdf, 0xf9, 0x49, 0xb7, 0x3f, 0x9b,
	0xf5, 0x1b, 0xce, 0x91, 0x93, 0xe7, 0xb0, 0x66, 0xe7, 0xe8, 0x59, 0xdb, 0x0b, 0xa7, 0x13, 0xd7,
	0xa5, 0xf4, 0x04, 0x36, 0x5a, 0xd2, 0x52, 0xd3, 0xf8, 0x04, 0x03, 0x3f, 0x75, 0x65, 0xb3, 0x7a,
	0x3d, 0x33, 0x87, 0x67, 0x0b, 0x7b, 0xf9, 0xe3, 0x0c, 0xce, 0x61, 0xbd, 0xe6, 0x95, 0x49, 0x82,
	0x68, 0xdd, 0x8d, 0xa1, 0xaf, 0x50, 0x97, 0x79, 0x93, 0xfe, 0xee, 0xbf, 0x32, 0xdd, 0x39, 0xf4,
	0x62, 0xba, 0xee, 0xfb, 0xcc, 0x52, 0x29, 0x91, 0xd3, 0x23, 0x77, 0xe4, 0x97, 0xb1, 0x7e, 0x74,
	0xe7, 0x5b, 0xdf, 0x7d, 0x61, 0x97, 0xfd, 0xfa, 0x47, 0xb1, 0xff, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0xeb, 0xca, 0x91, 0xa1, 0x9f, 0x04, 0x00, 0x00,
}
