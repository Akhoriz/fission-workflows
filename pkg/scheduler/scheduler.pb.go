// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/scheduler/scheduler.proto

/*
Package scheduler is a generated protocol buffer package.

It is generated from these files:
	pkg/scheduler/scheduler.proto

It has these top-level messages:
	Schedule
	ScheduledNode
	ScheduleRequest
*/
package scheduler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/fission/fission-workflow/pkg/types"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Schedule struct {
	InvocationId string                     `protobuf:"bytes,1,opt,name=invocationId" json:"invocationId,omitempty"`
	CreatedAt    *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	Nodes        []*ScheduledNode           `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Schedule) Reset()                    { *m = Schedule{} }
func (m *Schedule) String() string            { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()               {}
func (*Schedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Schedule) GetInvocationId() string {
	if m != nil {
		return m.InvocationId
	}
	return ""
}

func (m *Schedule) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Schedule) GetNodes() []*ScheduledNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type ScheduledNode struct {
	// Id of the task in the workflow
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ScheduledNode) Reset()                    { *m = ScheduledNode{} }
func (m *ScheduledNode) String() string            { return proto.CompactTextString(m) }
func (*ScheduledNode) ProtoMessage()               {}
func (*ScheduledNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ScheduledNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ScheduleRequest struct {
	Workflow   *types.Workflow                    `protobuf:"bytes,1,opt,name=workflow" json:"workflow,omitempty"`
	Invocation *types.WorkflowInvocationContainer `protobuf:"bytes,2,opt,name=invocation" json:"invocation,omitempty"`
}

func (m *ScheduleRequest) Reset()                    { *m = ScheduleRequest{} }
func (m *ScheduleRequest) String() string            { return proto.CompactTextString(m) }
func (*ScheduleRequest) ProtoMessage()               {}
func (*ScheduleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ScheduleRequest) GetWorkflow() *types.Workflow {
	if m != nil {
		return m.Workflow
	}
	return nil
}

func (m *ScheduleRequest) GetInvocation() *types.WorkflowInvocationContainer {
	if m != nil {
		return m.Invocation
	}
	return nil
}

func init() {
	proto.RegisterType((*Schedule)(nil), "Schedule")
	proto.RegisterType((*ScheduledNode)(nil), "ScheduledNode")
	proto.RegisterType((*ScheduleRequest)(nil), "ScheduleRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scheduler service

type SchedulerClient interface {
	Evaluate(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*Schedule, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Evaluate(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*Schedule, error) {
	out := new(Schedule)
	err := grpc.Invoke(ctx, "/Scheduler/evaluate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	Evaluate(context.Context, *ScheduleRequest) (*Schedule, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Scheduler/Evaluate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Evaluate(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "evaluate",
			Handler:    _Scheduler_Evaluate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/scheduler/scheduler.proto",
}

func init() { proto.RegisterFile("pkg/scheduler/scheduler.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4b, 0xfb, 0x30,
	0x14, 0xc7, 0x7f, 0xdd, 0xf8, 0xc9, 0xfa, 0xa6, 0x53, 0x72, 0x1a, 0x43, 0xd9, 0x28, 0x0a, 0xf3,
	0x60, 0x0a, 0x15, 0x44, 0xc1, 0x8b, 0x78, 0xda, 0xc5, 0x43, 0x15, 0x3c, 0x67, 0xcd, 0x5b, 0x17,
	0xd6, 0xe5, 0xd5, 0x24, 0xdd, 0xf0, 0x9f, 0xf0, 0x6f, 0x16, 0xd7, 0xa6, 0x73, 0x5e, 0xda, 0xe4,
	0xfb, 0x3e, 0xc9, 0xe7, 0xe5, 0xc1, 0x45, 0xb9, 0xca, 0x63, 0x9b, 0x2d, 0x51, 0x56, 0x05, 0x9a,
	0xfd, 0x8a, 0x97, 0x86, 0x1c, 0x8d, 0x1e, 0x72, 0xe5, 0x96, 0xd5, 0x9c, 0x67, 0xb4, 0x8e, 0x17,
	0xca, 0x5a, 0x45, 0xda, 0xff, 0x6f, 0xb6, 0x64, 0x56, 0x8b, 0x82, 0xb6, 0xf1, 0xcf, 0x15, 0xee,
	0xb3, 0x44, 0x5b, 0x7f, 0x9b, 0xa3, 0xe3, 0x9c, 0x28, 0x2f, 0x30, 0xde, 0xed, 0xe6, 0xd5, 0x22,
	0x76, 0x6a, 0x8d, 0xd6, 0x89, 0x75, 0x59, 0x03, 0xd1, 0x57, 0x00, 0xbd, 0xd7, 0xc6, 0xc7, 0x22,
	0x38, 0x56, 0x7a, 0x43, 0x99, 0x70, 0x8a, 0xf4, 0x4c, 0x0e, 0x83, 0x49, 0x30, 0x0d, 0xd3, 0x83,
	0x8c, 0xdd, 0x43, 0x98, 0x19, 0x14, 0x0e, 0xe5, 0x93, 0x1b, 0x76, 0x26, 0xc1, 0xb4, 0x9f, 0x8c,
	0x78, 0x6d, 0xe1, 0xde, 0xc2, 0xdf, 0xbc, 0x25, 0xdd, 0xc3, 0xec, 0x12, 0xfe, 0x6b, 0x92, 0x68,
	0x87, 0xdd, 0x49, 0x77, 0xda, 0x4f, 0x06, 0xdc, 0x7b, 0xe5, 0x0b, 0x49, 0x4c, 0xeb, 0x62, 0x34,
	0x86, 0x93, 0x83, 0x9c, 0x0d, 0xa0, 0xa3, 0x7c, 0x2b, 0x1d, 0x25, 0xa3, 0x0d, 0x9c, 0x7a, 0x20,
	0xc5, 0x8f, 0x0a, 0xad, 0x63, 0x57, 0xd0, 0xf3, 0x73, 0xd8, 0x81, 0xfd, 0x24, 0xe4, 0xef, 0x4d,
	0x90, 0xb6, 0x25, 0xf6, 0x08, 0xb0, 0x7f, 0x4a, 0xd3, 0xfb, 0x79, 0x0b, 0xce, 0xda, 0xd2, 0x33,
	0x69, 0x27, 0x94, 0x46, 0x93, 0xfe, 0xe2, 0x93, 0x3b, 0x08, 0xbd, 0xd7, 0xb0, 0x6b, 0xe8, 0xe1,
	0x46, 0x14, 0x95, 0x70, 0xc8, 0xce, 0xf8, 0x9f, 0x7e, 0x46, 0x61, 0x9b, 0x44, 0xff, 0xe6, 0x47,
	0xbb, 0xa9, 0xdc, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x98, 0xbb, 0x37, 0x7f, 0xe5, 0x01, 0x00,
	0x00,
}
