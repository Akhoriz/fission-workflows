// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskDependencyParametersDependencyType task dependency parameters dependency type
// swagger:model TaskDependencyParametersDependencyType
type TaskDependencyParametersDependencyType string

const (
	// TaskDependencyParametersDependencyTypeDATA captures enum value "DATA"
	TaskDependencyParametersDependencyTypeDATA TaskDependencyParametersDependencyType = "DATA"
	// TaskDependencyParametersDependencyTypeCONTROL captures enum value "CONTROL"
	TaskDependencyParametersDependencyTypeCONTROL TaskDependencyParametersDependencyType = "CONTROL"
	// TaskDependencyParametersDependencyTypeDYNAMICOUTPUT captures enum value "DYNAMIC_OUTPUT"
	TaskDependencyParametersDependencyTypeDYNAMICOUTPUT TaskDependencyParametersDependencyType = "DYNAMIC_OUTPUT"
)

// for schema
var taskDependencyParametersDependencyTypeEnum []interface{}

func init() {
	var res []TaskDependencyParametersDependencyType
	if err := json.Unmarshal([]byte(`["DATA","CONTROL","DYNAMIC_OUTPUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskDependencyParametersDependencyTypeEnum = append(taskDependencyParametersDependencyTypeEnum, v)
	}
}

func (m TaskDependencyParametersDependencyType) validateTaskDependencyParametersDependencyTypeEnum(path, location string, value TaskDependencyParametersDependencyType) error {
	if err := validate.Enum(path, location, value, taskDependencyParametersDependencyTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this task dependency parameters dependency type
func (m TaskDependencyParametersDependencyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTaskDependencyParametersDependencyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
