package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// WorkflowStatusStatus - READY: PARSING = 1; // During validation/parsing
// swagger:model WorkflowStatusStatus
type WorkflowStatusStatus string

const (
	WorkflowStatusStatusUNKNOWN WorkflowStatusStatus = "UNKNOWN"
	WorkflowStatusStatusREADY   WorkflowStatusStatus = "READY"
	WorkflowStatusStatusFAILED  WorkflowStatusStatus = "FAILED"
	WorkflowStatusStatusDELETED WorkflowStatusStatus = "DELETED"
)

// for schema
var workflowStatusStatusEnum []interface{}

func (m WorkflowStatusStatus) validateWorkflowStatusStatusEnum(path, location string, value WorkflowStatusStatus) error {
	if workflowStatusStatusEnum == nil {
		var res []WorkflowStatusStatus
		if err := json.Unmarshal([]byte(`["UNKNOWN","READY","FAILED","DELETED"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			workflowStatusStatusEnum = append(workflowStatusStatusEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, workflowStatusStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this workflow status status
func (m WorkflowStatusStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWorkflowStatusStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
