package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskInvocationSpec task invocation spec
// swagger:model TaskInvocationSpec
type TaskInvocationSpec struct {

	// inputs
	Inputs map[string]TypedValue `json:"inputs,omitempty"`

	// task Id
	TaskID string `json:"taskId,omitempty"`

	// Id of the task to be invoked (no ambiguatity at this point
	Type *TaskTypeDef `json:"type,omitempty"`
}

// Validate validates this task invocation spec
func (m *TaskInvocationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskInvocationSpec) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	if err := validate.Required("inputs", "body", m.Inputs); err != nil {
		return err
	}

	return nil
}

func (m *TaskInvocationSpec) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {

		if err := m.Type.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
