// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskStatusStatus task status status
// swagger:model TaskStatusStatus
type TaskStatusStatus string

const (
	// TaskStatusStatusSTARTED captures enum value "STARTED"
	TaskStatusStatusSTARTED TaskStatusStatus = "STARTED"
	// TaskStatusStatusREADY captures enum value "READY"
	TaskStatusStatusREADY TaskStatusStatus = "READY"
	// TaskStatusStatusFAILED captures enum value "FAILED"
	TaskStatusStatusFAILED TaskStatusStatus = "FAILED"
)

// for schema
var taskStatusStatusEnum []interface{}

func init() {
	var res []TaskStatusStatus
	if err := json.Unmarshal([]byte(`["STARTED","READY","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskStatusStatusEnum = append(taskStatusStatusEnum, v)
	}
}

func (m TaskStatusStatus) validateTaskStatusStatusEnum(path, location string, value TaskStatusStatus) error {
	if err := validate.Enum(path, location, value, taskStatusStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this task status status
func (m TaskStatusStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTaskStatusStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
