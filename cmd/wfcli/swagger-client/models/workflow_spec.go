// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkflowSpec Workflow Definition
//
// The workflowDefinition contains the definition of a workflow.
//
// Ideally the source code (json, yaml) can be converted directly to this message.
// Naming, triggers and versioning of the workflow itself is out of the scope of this data structure, which is delegated
// to the user/system upon the creation of a workflow.
// swagger:model WorkflowSpec
type WorkflowSpec struct {

	// apiVersion describes what version is of the workflow definition.
	// By default the workflow engine will assume the latest version to be used.
	APIVersion string `json:"apiVersion,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// The UID that the workflow should have. Only use this in case you want to force a specific UID.
	ForceID string `json:"forceId,omitempty"`

	// Internal indicates whether is a workflow should be visible to a human (default) or not.
	Internal bool `json:"internal,omitempty"`

	// Name is solely for human-readablity
	Name string `json:"name,omitempty"`

	// From which task should the workflow return the output? Future: multiple? Implicit?
	OutputTask string `json:"outputTask,omitempty"`

	// tasks
	Tasks WorkflowSpecTasks `json:"tasks,omitempty"`
}

// Validate validates this workflow spec
func (m *WorkflowSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowSpec) UnmarshalBinary(b []byte) error {
	var res WorkflowSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
