// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskInvocationStatusStatus task invocation status status
// swagger:model TaskInvocationStatusStatus
type TaskInvocationStatusStatus string

const (
	// TaskInvocationStatusStatusUNKNOWN captures enum value "UNKNOWN"
	TaskInvocationStatusStatusUNKNOWN TaskInvocationStatusStatus = "UNKNOWN"
	// TaskInvocationStatusStatusSCHEDULED captures enum value "SCHEDULED"
	TaskInvocationStatusStatusSCHEDULED TaskInvocationStatusStatus = "SCHEDULED"
	// TaskInvocationStatusStatusINPROGRESS captures enum value "IN_PROGRESS"
	TaskInvocationStatusStatusINPROGRESS TaskInvocationStatusStatus = "IN_PROGRESS"
	// TaskInvocationStatusStatusSUCCEEDED captures enum value "SUCCEEDED"
	TaskInvocationStatusStatusSUCCEEDED TaskInvocationStatusStatus = "SUCCEEDED"
	// TaskInvocationStatusStatusFAILED captures enum value "FAILED"
	TaskInvocationStatusStatusFAILED TaskInvocationStatusStatus = "FAILED"
	// TaskInvocationStatusStatusABORTED captures enum value "ABORTED"
	TaskInvocationStatusStatusABORTED TaskInvocationStatusStatus = "ABORTED"
	// TaskInvocationStatusStatusSKIPPED captures enum value "SKIPPED"
	TaskInvocationStatusStatusSKIPPED TaskInvocationStatusStatus = "SKIPPED"
)

// for schema
var taskInvocationStatusStatusEnum []interface{}

func init() {
	var res []TaskInvocationStatusStatus
	if err := json.Unmarshal([]byte(`["UNKNOWN","SCHEDULED","IN_PROGRESS","SUCCEEDED","FAILED","ABORTED","SKIPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskInvocationStatusStatusEnum = append(taskInvocationStatusStatusEnum, v)
	}
}

func (m TaskInvocationStatusStatus) validateTaskInvocationStatusStatusEnum(path, location string, value TaskInvocationStatusStatus) error {
	if err := validate.Enum(path, location, value, taskInvocationStatusStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this task invocation status status
func (m TaskInvocationStatusStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTaskInvocationStatusStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
