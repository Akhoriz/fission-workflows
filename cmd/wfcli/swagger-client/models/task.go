package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Task A task is the primitive unit of a workflow, representing an action that needs to be performed in order to continue.
//
// A task as a number of inputs and exactly two outputs
// Id is specified outside of task
// swagger:model Task
type Task struct {

	// Number of dependencies to wait for
	Await int32 `json:"await,omitempty"`

	// Name/identifier of the function
	FunctionRef string `json:"functionRef,omitempty"`

	// Same as the string in the map<string, Task> definition. One needs to be set.
	//
	// If there is a conflict the map key gets precendence over this field.
	ID string `json:"id,omitempty"`

	// inputs
	Inputs map[string]TypedValue `json:"inputs,omitempty"`

	// Transform the output, or override the output with a literal
	Output *TypedValue `json:"output,omitempty"`

	// Dependencies for this task to execute
	Requires map[string]TaskDependencyParameters `json:"requires,omitempty"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOutput(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRequires(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	if err := validate.Required("inputs", "body", m.Inputs); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateOutput(formats strfmt.Registry) error {

	if swag.IsZero(m.Output) { // not required
		return nil
	}

	if m.Output != nil {

		if err := m.Output.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Task) validateRequires(formats strfmt.Registry) error {

	if swag.IsZero(m.Requires) { // not required
		return nil
	}

	if err := validate.Required("requires", "body", m.Requires); err != nil {
		return err
	}

	return nil
}
