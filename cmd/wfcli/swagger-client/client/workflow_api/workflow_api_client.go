// Code generated by go-swagger; DO NOT EDIT.

package workflow_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workflow api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Create create API
*/
func (a *Client) Create(params *CreateParams) (*CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create",
		Method:             "POST",
		PathPattern:        "/workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOK), nil

}

/*
Delete delete API
*/
func (a *Client) Delete(params *DeleteParams) (*DeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete",
		Method:             "DELETE",
		PathPattern:        "/workflow/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOK), nil

}

/*
WfGet wf get API
*/
func (a *Client) WfGet(params *WfGetParams) (*WfGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWfGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WfGet",
		Method:             "GET",
		PathPattern:        "/workflow/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WfGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WfGetOK), nil

}

/*
WfList wf list API
*/
func (a *Client) WfList(params *WfListParams) (*WfListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWfListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WfList",
		Method:             "GET",
		PathPattern:        "/workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WfListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WfListOK), nil

}

/*
WfValidate wf validate API
*/
func (a *Client) WfValidate(params *WfValidateParams) (*WfValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWfValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WfValidate",
		Method:             "POST",
		PathPattern:        "/workflow/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WfValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WfValidateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
