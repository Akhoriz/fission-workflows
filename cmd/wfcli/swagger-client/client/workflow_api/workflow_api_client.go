package workflow_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workflow api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Create create API
*/
func (a *Client) Create(params *CreateParams) (*CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create",
		Method:             "POST",
		PathPattern:        "/workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOK), nil

}

/*
Get0 get 0 API
*/
func (a *Client) Get0(params *Get0Params) (*Get0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGet0Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get_0",
		Method:             "GET",
		PathPattern:        "/workflow/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &Get0Reader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Get0OK), nil

}

/*
List0 list 0 API
*/
func (a *Client) List0(params *List0Params) (*List0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewList0Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "List_0",
		Method:             "GET",
		PathPattern:        "/workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &List0Reader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*List0OK), nil

}

/*
Validate validate API
*/
func (a *Client) Validate(params *ValidateParams) (*ValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Validate",
		Method:             "POST",
		PathPattern:        "/workflow/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ValidateReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ValidateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
