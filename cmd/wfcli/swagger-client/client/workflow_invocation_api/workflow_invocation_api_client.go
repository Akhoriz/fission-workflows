package workflow_invocation_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workflow invocation api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow invocation api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Cancel cancels a workflow invocation

This action is irreverisble. A canceled invocation cannot be resumed or restarted.
In case that an invocation already is canceled, has failed or has completed, nothing happens.
In case that an invocation does not exist a HTTP 404 error status is returned.
*/
func (a *Client) Cancel(params *CancelParams) (*CancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Cancel",
		Method:             "DELETE",
		PathPattern:        "/invocation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CancelReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelOK), nil

}

/*
Get gets the specification and status of a workflow invocation

Get returns three different aspects of the workflow invocation, namely the spec (specification), status and logs.
To lighten the request load, consider using a more specific request.
*/
func (a *Client) Get(params *GetParams) (*GetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get",
		Method:             "GET",
		PathPattern:        "/invocation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOK), nil

}

/*
Invoke creates a new workflow invocation

In case the invocation specification is missing fields or contains invalid fields, a HTTP 400 is returned.
*/
func (a *Client) Invoke(params *InvokeParams) (*InvokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Invoke",
		Method:             "POST",
		PathPattern:        "/invocation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InvokeReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InvokeOK), nil

}

/*
InvokeSync invoke sync API
*/
func (a *Client) InvokeSync(params *InvokeSyncParams) (*InvokeSyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvokeSyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvokeSync",
		Method:             "POST",
		PathPattern:        "/invocation/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InvokeSyncReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InvokeSyncOK), nil

}

/*
InvokeSync0 invoke sync 0 API
*/
func (a *Client) InvokeSync0(params *InvokeSync0Params) (*InvokeSync0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvokeSync0Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvokeSync_0",
		Method:             "GET",
		PathPattern:        "/invocation/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InvokeSync0Reader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InvokeSync0OK), nil

}

/*
List list API
*/
func (a *Client) List(params *ListParams) (*ListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "List",
		Method:             "GET",
		PathPattern:        "/invocation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
