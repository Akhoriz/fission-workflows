// Code generated by go-swagger; DO NOT EDIT.

package workflow_invocation_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewInvokeSync2Params creates a new InvokeSync2Params object
// with the default values initialized.
func NewInvokeSync2Params() *InvokeSync2Params {
	var ()
	return &InvokeSync2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewInvokeSync2ParamsWithTimeout creates a new InvokeSync2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewInvokeSync2ParamsWithTimeout(timeout time.Duration) *InvokeSync2Params {
	var ()
	return &InvokeSync2Params{

		timeout: timeout,
	}
}

// NewInvokeSync2ParamsWithContext creates a new InvokeSync2Params object
// with the default values initialized, and the ability to set a context for a request
func NewInvokeSync2ParamsWithContext(ctx context.Context) *InvokeSync2Params {
	var ()
	return &InvokeSync2Params{

		Context: ctx,
	}
}

// NewInvokeSync2ParamsWithHTTPClient creates a new InvokeSync2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInvokeSync2ParamsWithHTTPClient(client *http.Client) *InvokeSync2Params {
	var ()
	return &InvokeSync2Params{
		HTTPClient: client,
	}
}

/*InvokeSync2Params contains all the parameters to send to the API endpoint
for the invoke sync2 operation typically these are written to a http.Request
*/
type InvokeSync2Params struct {

	/*ParentID
	  ParentId contains the id of the encapsulating workflow invocation.

	This used within the workflow engine; for user-provided workflow invocations the parentId is ignored.

	*/
	ParentID *string
	/*WorkflowID*/
	WorkflowID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the invoke sync2 params
func (o *InvokeSync2Params) WithTimeout(timeout time.Duration) *InvokeSync2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the invoke sync2 params
func (o *InvokeSync2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the invoke sync2 params
func (o *InvokeSync2Params) WithContext(ctx context.Context) *InvokeSync2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the invoke sync2 params
func (o *InvokeSync2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the invoke sync2 params
func (o *InvokeSync2Params) WithHTTPClient(client *http.Client) *InvokeSync2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the invoke sync2 params
func (o *InvokeSync2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithParentID adds the parentID to the invoke sync2 params
func (o *InvokeSync2Params) WithParentID(parentID *string) *InvokeSync2Params {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the invoke sync2 params
func (o *InvokeSync2Params) SetParentID(parentID *string) {
	o.ParentID = parentID
}

// WithWorkflowID adds the workflowID to the invoke sync2 params
func (o *InvokeSync2Params) WithWorkflowID(workflowID *string) *InvokeSync2Params {
	o.SetWorkflowID(workflowID)
	return o
}

// SetWorkflowID adds the workflowId to the invoke sync2 params
func (o *InvokeSync2Params) SetWorkflowID(workflowID *string) {
	o.WorkflowID = workflowID
}

// WriteToRequest writes these params to a swagger request
func (o *InvokeSync2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ParentID != nil {

		// query param parentId
		var qrParentID string
		if o.ParentID != nil {
			qrParentID = *o.ParentID
		}
		qParentID := qrParentID
		if qParentID != "" {
			if err := r.SetQueryParam("parentId", qParentID); err != nil {
				return err
			}
		}

	}

	if o.WorkflowID != nil {

		// query param workflowId
		var qrWorkflowID string
		if o.WorkflowID != nil {
			qrWorkflowID = *o.WorkflowID
		}
		qWorkflowID := qrWorkflowID
		if qWorkflowID != "" {
			if err := r.SetQueryParam("workflowId", qWorkflowID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
