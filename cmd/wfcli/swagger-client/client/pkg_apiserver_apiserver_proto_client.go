package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/fission/fission-workflows/cmd/wfcli/swagger-client/client/admin_api"
	"github.com/fission/fission-workflows/cmd/wfcli/swagger-client/client/workflow_api"
	"github.com/fission/fission-workflows/cmd/wfcli/swagger-client/client/workflow_invocation_api"
)

// Default pkg apiserver apiserver proto HTTP client.
var Default = NewHTTPClient(nil)

// NewHTTPClient creates a new pkg apiserver apiserver proto HTTP client.
func NewHTTPClient(formats strfmt.Registry) *PkgApiserverApiserverProto {
	if formats == nil {
		formats = strfmt.Default
	}
	transport := httptransport.New("localhost", "/", []string{"http", "https"})
	return New(transport, formats)
}

// New creates a new pkg apiserver apiserver proto client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *PkgApiserverApiserverProto {
	cli := new(PkgApiserverApiserverProto)
	cli.Transport = transport

	cli.AdminAPI = admin_api.New(transport, formats)

	cli.WorkflowAPI = workflow_api.New(transport, formats)

	cli.WorkflowInvocationAPI = workflow_invocation_api.New(transport, formats)

	return cli
}

// PkgApiserverApiserverProto is a client for pkg apiserver apiserver proto
type PkgApiserverApiserverProto struct {
	AdminAPI *admin_api.Client

	WorkflowAPI *workflow_api.Client

	WorkflowInvocationAPI *workflow_invocation_api.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *PkgApiserverApiserverProto) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.AdminAPI.SetTransport(transport)

	c.WorkflowAPI.SetTransport(transport)

	c.WorkflowInvocationAPI.SetTransport(transport)

}
